1
00:00:00,090 --> 00:00:02,346
ここまでで、機械学習について、様々な知識を得た。

2
00:00:02,390 --> 00:00:03,635
このビデオでは、

3
00:00:03,635 --> 00:00:05,448
プログラミング言語

4
00:00:05,470 --> 00:00:06,718
Octave を使って、

5
00:00:06,760 --> 00:00:08,878
既に見た

6
00:00:08,890 --> 00:00:10,259
学習アルゴリズム、および、

7
00:00:10,259 --> 00:00:11,770
今後の授業で学ぶ学習アルゴリズムを

8
00:00:11,770 --> 00:00:14,872
手早く実装する方法を学ぶ。

9
00:00:14,900 --> 00:00:16,381
今まで、機械学習を教えるのに、

10
00:00:16,381 --> 00:00:19,497
様々なプログラミング言語を使ってきた。

11
00:00:19,500 --> 00:00:22,046
たとえば C++、 Java、

12
00:00:22,825 --> 00:00:25,379
Python、NumPy、R、そして

13
00:00:25,379 --> 00:00:27,128
Octave など。その経験から

14
00:00:27,160 --> 00:00:28,783
学んだことは、学生たちが

15
00:00:28,790 --> 00:00:30,535
一番効率よく、

16
00:00:30,570 --> 00:00:32,497
手早く学ぶことができ、

17
00:00:32,497 --> 00:00:33,780
そして アルゴリズムの試作を

18
00:00:33,780 --> 00:00:35,569
すぐに行えるのは、

19
00:00:35,569 --> 00:00:38,262
Octave のような、高級言語だった。

20
00:00:38,290 --> 00:00:39,798
実際に、私がよく

21
00:00:39,798 --> 00:00:41,516
シリコンバレーでみかけるのは、

22
00:00:41,520 --> 00:00:43,655
構築する必要があるのが

23
00:00:43,655 --> 00:00:44,714
構築したいものが

24
00:00:44,740 --> 00:00:46,548
大規模な学習

25
00:00:46,610 --> 00:00:48,242
アルゴリズムであっても、多くの場合、

26
00:00:48,242 --> 00:00:50,637
まず試作が行われ、その言語は Octave であることだ。

27
00:00:50,660 --> 00:00:52,200
これは 試作用の言語として優れている。

28
00:00:52,210 --> 00:00:55,264
学習アルゴリズムを手早く動作させ、

29
00:00:55,270 --> 00:00:56,629
本当に、必要な時のみ、

30
00:00:56,629 --> 00:00:58,459
それを大規模に展開する段階になって、

31
00:00:58,480 --> 00:01:00,362
その時にのみ、時間をかけて

32
00:01:00,362 --> 00:01:03,059
アルゴリズムを

33
00:01:03,059 --> 00:01:05,150
C++ や Java などの言語で再実装する。

34
00:01:05,160 --> 00:01:06,273
なぜなら、これまで学んだ教訓として、

35
00:01:06,300 --> 00:01:08,679
プログラミングの時間、開発の時間、

36
00:01:08,710 --> 00:01:09,848
つまりあなたの時間、

37
00:01:09,870 --> 00:01:13,309
機械学習に使う時間は、非常に貴重なのだ。

38
00:01:13,320 --> 00:01:15,101
このため、もし Octave を使って

39
00:01:15,101 --> 00:01:17,898
学習アルゴリズムを手早く稼動させれば、

40
00:01:17,898 --> 00:01:18,932
結果的に、開発時間を

41
00:01:18,932 --> 00:01:20,697
大幅に節約でき、

42
00:01:20,720 --> 00:01:22,143
最初にアルゴリズムの開発を

43
00:01:22,150 --> 00:01:23,971
Octave で行い、次に、アイディアの有効性を確認てから、

44
00:01:23,971 --> 00:01:28,145
C++ や Java などで実装すると良い。

45
00:01:28,160 --> 00:01:30,238
私が見た中で、人々が一番一般的に

46
00:01:30,238 --> 00:01:31,538
機械学習で使う試作用の言語は、

47
00:01:31,560 --> 00:01:34,058
Octave、 MATLAB、

48
00:01:34,070 --> 00:01:37,230
Python、NumPy、そして R だ。

49
00:01:38,150 --> 00:01:40,032
Octave はオープンソースなので良い。

50
00:01:40,032 --> 00:01:42,660
MATLAB も有効だが、

51
00:01:42,670 --> 00:01:44,656
多くの人にとって、

52
00:01:44,656 --> 00:01:45,956
価格が高すぎる。

53
00:01:45,960 --> 00:01:47,972
もしMATLAB のコピーが使用できるなら、

54
00:01:47,988 --> 00:01:50,095
このクラスで MATLAB を使ってもいい。

55
00:01:50,110 --> 00:01:52,037
もし Python、NumPy を知っているか

56
00:01:52,037 --> 00:01:54,853
R を知っているなら、それを使う人も中にはいる。

57
00:01:54,870 --> 00:01:56,353
しかし、私が見る限り、

58
00:01:56,360 --> 00:01:57,739
結果的にこうした人たちは、

59
00:01:57,760 --> 00:02:00,041
こうした言語では、開発に多くの時間が

60
00:02:00,050 --> 00:02:02,121
かかる傾向がある。

61
00:02:02,121 --> 00:02:04,048
というのは、Python、NumPy の構文は、

62
00:02:04,048 --> 00:02:08,391
Octave の構文よりも、やや扱いにくい。

63
00:02:08,410 --> 00:02:09,704
ということで、また

64
00:02:09,704 --> 00:02:11,372
スターターコードを Octave で

65
00:02:11,380 --> 00:02:13,039
リリースすることも考えると、

66
00:02:13,039 --> 00:02:14,363
私として、強くお勧めするのは、

67
00:02:14,363 --> 00:02:18,321
NumPy や R で このクラスの演習問題を試みないこと。

68
00:02:18,330 --> 00:02:19,805
お勧めしたいのは、

69
00:02:19,805 --> 00:02:21,498
代わりに、このクラスのプログラミング演習を

70
00:02:21,520 --> 00:02:24,292
Octave で行うこと。

71
00:02:24,330 --> 00:02:25,428
このビデオで私が

72
00:02:25,428 --> 00:02:26,708
お見せしたいのは、

73
00:02:26,708 --> 00:02:28,667
コマンドを、ざっと通して紹介し、

74
00:02:28,667 --> 00:02:29,879
そのゴールとして

75
00:02:29,879 --> 00:02:31,073
Octave で利用可能なコマンドの範囲や、

76
00:02:31,080 --> 00:02:34,807
何ができるのか、手早く紹介することだ。

77
00:02:34,807 --> 00:02:36,493
コースウェブサイトでは

78
00:02:36,520 --> 00:02:38,965
私がお見せすることを

79
00:02:38,965 --> 00:02:42,095
全て講義録として掲載するので、

80
00:02:42,095 --> 00:02:43,185
このビデオを見終わったら、

81
00:02:43,185 --> 00:02:44,905
コースウェブサイトに掲載された

82
00:02:44,905 --> 00:02:46,635
講義録を参考にして

83
00:02:46,635 --> 00:02:48,247
コマンドを見つけたい時に、利用してくほしい。

84
00:02:48,247 --> 00:02:50,226
具体的に、私がお勧めするのは、

85
00:02:50,226 --> 00:02:53,225
まずこのチュートリアルビデオを見て、

86
00:02:53,230 --> 00:02:55,118
最後まで見終わったら、

87
00:02:55,120 --> 00:02:58,728
Octave をコンピュータにインストールし、

88
00:02:58,728 --> 00:02:59,738
最後に、コースウェブサイトへ行き、

89
00:02:59,738 --> 00:03:01,769
講義録をダウンロードして

90
00:03:01,770 --> 00:03:02,983
このセッションで見たことを

91
00:03:02,983 --> 00:03:04,915
参考に、

92
00:03:04,930 --> 00:03:07,162
興味のあるコマンドを

93
00:03:07,200 --> 00:03:09,132
自分の Octave で試してみることだ。

94
00:03:09,132 --> 00:03:10,602
自分のコンピュータで実行することで

95
00:03:10,602 --> 00:03:12,962
自分の目で確認してほしい。

96
00:03:12,970 --> 00:03:15,535
では、始める。

97
00:03:15,920 --> 00:03:19,363
これは、私の Windows デスクトップで、今から Octave を起動する。

98
00:03:19,370 --> 00:03:20,977
今、Octave を開いた。

99
00:03:20,977 --> 00:03:22,522
これが Octave のプロンプト。

100
00:03:22,522 --> 00:03:24,475
最初に、初歩的な Octave の

101
00:03:24,475 --> 00:03:27,291
操作を見せる。

102
00:03:27,330 --> 00:03:28,505
まず 5 + 6 と入力すると、

103
00:03:28,505 --> 00:03:30,493
11 が答えとして戻る。

104
00:03:30,493 --> 00:03:31,516
3 - 2、

105
00:03:31,540 --> 00:03:33,710
5 x 8、

106
00:03:35,733 --> 00:03:37,747
2^6 は 64

107
00:03:37,810 --> 00:03:42,361
これらが初歩的な算術演算。

108
00:03:42,390 --> 00:03:44,495
また論理演算も可能だ。

109
00:03:44,550 --> 00:03:45,929
よって、 1 == 2 は

110
00:03:45,929 --> 00:03:47,722
偽 を返す。

111
00:03:47,722 --> 00:03:51,658
% コマンドは、ここではコメントの意味だ。

112
00:03:51,658 --> 00:03:53,861
よって、 1 == 2 は偽を返し、

113
00:03:53,861 --> 00:03:55,622
これは ゼロで表される。

114
00:03:55,650 --> 00:03:58,028
1 が 2 と同等ではない、とすると、これは真だ。

115
00:03:58,028 --> 00:03:59,312
これは真。

116
00:03:59,312 --> 00:04:00,718
これは、1 を戻す。

117
00:04:00,718 --> 00:04:02,146
注意点は、同等ではないという演算子は

118
00:04:02,146 --> 00:04:05,478
この ~= という記号だ。

119
00:04:05,550 --> 00:04:07,336
つまり != ではない。

120
00:04:07,336 --> 00:04:09,267
これは、いくつかの

121
00:04:09,267 --> 00:04:10,878
プログラミング言語で使われる。

122
00:04:10,910 --> 00:04:13,616
さて、論理演算 1 AND 0

123
00:04:13,616 --> 00:04:15,545
これは && という記号を使って

124
00:04:15,545 --> 00:04:17,340
論理積を表す。

125
00:04:18,120 --> 00:04:20,188
そしてこれは偽となる。

126
00:04:20,188 --> 00:04:23,886
1 または 0 は 論理和演算で、

127
00:04:23,900 --> 00:04:25,736
それは 真となる。

128
00:04:25,736 --> 00:04:27,131
また xor(1, 0)、

129
00:04:27,131 --> 00:04:30,333
もでき、これは 1 を返す。

130
00:04:30,333 --> 00:04:32,928
この左側にある、この octave-3.2.4.exe:11

131
00:04:32,928 --> 00:04:35,683
これはデフォルトの Octave プロンプトだ。

132
00:04:35,700 --> 00:04:37,513
この表示は、

133
00:04:37,520 --> 00:04:39,150
Octave のバージョンなど。

134
00:04:39,150 --> 00:04:40,423
このプロンプトが不要なら、

135
00:04:40,450 --> 00:04:43,025
少し暗号的なコマンド PS

136
00:04:43,025 --> 00:04:44,670
引用符、>>

137
00:04:44,670 --> 00:04:46,602
などなど を使って、

138
00:04:46,602 --> 00:04:48,800
プロンプトを変えられる。

139
00:04:48,810 --> 00:04:51,272
そして、この引用符に囲まれた真ん中の文字列、

140
00:04:51,272 --> 00:04:53,362
この '>> '

141
00:04:53,400 --> 00:04:55,592
これが私の好みの Octave のプロンプトだ。

142
00:04:55,592 --> 00:04:57,722
だから、Enterを押すと、

143
00:04:57,920 --> 00:04:59,763
おっと、失礼、

144
00:04:59,763 --> 00:05:00,786
このように、

145
00:05:00,786 --> 00:05:02,622
PS1 とすると、

146
00:05:02,622 --> 00:05:05,420
このように Octave のプロンプトが >> という記号に変わり、

147
00:05:05,500 --> 00:05:09,263
見やすくなる。

148
00:05:09,710 --> 00:05:12,384
次に、Octave の変数について。

149
00:05:12,384 --> 00:05:12,384


150
00:05:12,384 --> 00:05:16,165
変数 A を指定して、それに 3 を代入し

151
00:05:16,165 --> 00:05:18,421
Enter を押す。

152
00:05:18,440 --> 00:05:20,043
これで A = 3 となった。

153
00:05:20,070 --> 00:05:22,861
変数に代入しつつ、結果を出力しない場合は、

154
00:05:22,861 --> 00:05:26,758
セミコロンをつけると、

155
00:05:26,920 --> 00:05:30,824
結果をプリント出力しない。

156
00:05:30,824 --> 00:05:33,160
そうすと、Enter を押しても、何も出力されない。

157
00:05:33,160 --> 00:05:35,399
一方、 A = 3

158
00:05:35,420 --> 00:05:36,719
とすると、出力され、

159
00:05:36,719 --> 00:05:39,845
A = 3; だと、出力されない。

160
00:05:39,850 --> 00:05:41,845
文字列の代入もできる。

161
00:05:41,845 --> 00:05:43,473
B = 'Hi'

162
00:05:43,520 --> 00:05:45,047
ここで単に

163
00:05:45,047 --> 00:05:46,072
Enter Bとすると変数が出力される。

164
00:05:46,072 --> 00:05:48,338
よって、 B は文字列 'Hi' だ。

165
00:05:48,370 --> 00:05:51,118
C = (3 >= 1)

166
00:05:51,130 --> 00:05:54,538
とすると、C は真になる。

167
00:05:55,710 --> 00:05:57,999
プリント出力、

168
00:05:58,030 --> 00:06:00,832
つまり変数を画面に出すには、こうする。

169
00:06:00,832 --> 00:06:03,725
まずは A = Pi とする。

170
00:06:03,760 --> 00:06:04,985
これをプリント出力するなら、

171
00:06:04,985 --> 00:06:08,545
このように A とだけ入力する。すると出力される。

172
00:06:08,545 --> 00:06:10,344
複雑な出力方法としては、

173
00:06:10,344 --> 00:06:13,674
disp コマンドがあり、これは display の略だ。

174
00:06:13,710 --> 00:06:15,858
display A とすると、A をこのように出力する。

175
00:06:15,890 --> 00:06:18,337
文字列をも表示できる。

176
00:06:18,350 --> 00:06:21,392
例えば、 disp、sprintf、2

177
00:06:21,460 --> 00:06:24,990
decimals、%0.2、

178
00:06:25,260 --> 00:06:28,273
F、カンマ、A、とこのように入力する。

179
00:06:28,273 --> 00:06:29,863
するとこれは文字列として

180
00:06:29,863 --> 00:06:31,722
'2 decimals: 3.14' を出力する。

181
00:06:31,722 --> 00:06:33,651
これは少し

182
00:06:33,670 --> 00:06:35,993
古い C 的な構文だ。

183
00:06:35,993 --> 00:06:37,404
みなさんの中で

184
00:06:37,420 --> 00:06:39,073
以前C でプログラミングした人は、

185
00:06:39,073 --> 00:06:41,378
それと基本的に同じ構文が、画面出力で使える。

186
00:06:41,380 --> 00:06:44,498
だから、sprintf は

187
00:06:44,510 --> 00:06:46,021
文字列を出力し、

188
00:06:46,021 --> 00:06:48,274
それはこの '2 deciamals: 3.14' という文字列だ。

189
00:06:48,290 --> 00:06:50,644
この %0.2f の意味は

190
00:06:50,644 --> 00:06:52,475
これを A と差し替えること、

191
00:06:52,475 --> 00:06:55,926
また小数点から二桁まで表示、ということだ。

192
00:06:55,926 --> 00:06:58,104
そして disp はこの文字列を

193
00:06:58,130 --> 00:07:00,691
sprintf コマンドから出力されたものを

194
00:07:00,691 --> 00:07:01,683
sprintf

195
00:07:01,683 --> 00:07:03,091
sprintf コマンド

196
00:07:03,091 --> 00:07:05,835
そして disp が、実際にその文字列を表示する。

197
00:07:05,870 --> 00:07:07,020
では、別の

198
00:07:07,020 --> 00:07:11,360
例として sprintf、6 decimals

199
00:07:11,361 --> 00:07:14,551
%0.6f、カンマ、A

200
00:07:14,930 --> 00:07:17,075
すると、これは、円周率 Pi を

201
00:07:17,090 --> 00:07:21,100
小数点六桁まで出力する。

202
00:07:22,060 --> 00:07:25,728
最後に、前に見たように、 A はこのように出力される。

203
00:07:25,740 --> 00:07:28,633
便利なショートカットがあり、format long と入力すると、

204
00:07:28,633 --> 00:07:31,759
文字列がデフォルトで

205
00:07:31,760 --> 00:07:33,748
より多くの小数点以下の桁数で、表示される。

206
00:07:33,748 --> 00:07:35,593
そして format short は

207
00:07:35,593 --> 00:07:37,095
これをデフォルトに戻すコマンド。

208
00:07:37,120 --> 00:07:40,113
出力される桁数が減る。

209
00:07:40,600 --> 00:07:43,934
OK、これが変数の取り扱いだ。

210
00:07:43,934 --> 00:07:47,047
では、ベクトルと行列について見てみる。

211
00:07:47,070 --> 00:07:49,274
例えば、A に行列を代入したい場合。

212
00:07:49,280 --> 00:07:50,974
では例を見せる。1、2、

213
00:07:50,980 --> 00:07:54,593
セミコロン、3、4、セミコロン、5、6

214
00:07:54,600 --> 00:07:56,235
これは 3 x 2 の

215
00:07:56,240 --> 00:07:58,572
行列を作成し、その最初の

216
00:07:58,580 --> 00:07:59,818
行は 1、2、二番目の行

217
00:07:59,820 --> 00:08:02,030
3、4、三番目の行は 5、6

218
00:08:02,030 --> 00:08:04,385
セミコロンの意味は

219
00:08:04,390 --> 00:08:05,818
本質的に、行列の

220
00:08:05,820 --> 00:08:07,915
次の行に行きなさい、ということだ。

221
00:08:07,915 --> 00:08:09,016
これを入力する方法は、他にもある。

222
00:08:09,016 --> 00:08:11,536
A 1、2、セミコロン

223
00:08:11,536 --> 00:08:15,046
3、4、セミコロン、5、6、と、

224
00:08:15,046 --> 00:08:17,038
こうするのも、別の同等のやり方で

225
00:08:17,038 --> 00:08:18,576
A に

226
00:08:18,576 --> 00:08:22,183
この 3 x 2 の行列の値を代入する。

227
00:08:22,200 --> 00:08:23,568
同様に、ベクトルも代入できる。

228
00:08:23,568 --> 00:08:25,532
だから V = 1、2、3

229
00:08:25,560 --> 00:08:27,359
これは実は行ベクトルた。

230
00:08:27,359 --> 00:08:29,915
3 x 1 ベクトルとも言う。

231
00:08:29,940 --> 00:08:32,016
これは 太い Y ベクトル...

232
00:08:32,030 --> 00:08:34,375
失礼、違った、これは

233
00:08:34,380 --> 00:08:37,998
1 x 3 行列だった。

234
00:08:37,998 --> 00:08:39,256
3 x 1 ではない。

235
00:08:39,256 --> 00:08:41,015
もしこれに

236
00:08:41,015 --> 00:08:43,975
列ベクトルを代入したい場合は、

237
00:08:43,975 --> 00:08:48,778
代わりに、V = 1、セミコロン、2、セミコロン、3

238
00:08:48,830 --> 00:08:50,030
これで 3 x 1 のベクトルができる、

239
00:08:50,100 --> 00:08:51,797
1 x 3 ベクトルの代わりに。

240
00:08:51,797 --> 00:08:55,892
だからこれは、列ベクトルだ。

241
00:08:56,250 --> 00:08:57,968
さらにいくつか、便利な表記方法を見せる。

242
00:08:57,968 --> 00:09:02,343
V = 1、コロン、0.1、コロン、2。

243
00:09:02,343 --> 00:09:03,598
この意味は、

244
00:09:03,620 --> 00:09:05,716
V にいくつかの要素を、

245
00:09:05,716 --> 00:09:08,714
1 から始めて代入し、

246
00:09:08,714 --> 00:09:10,392
ステップの増分を、

247
00:09:10,410 --> 00:09:13,657
0.1単位で増やし、2 に至るまで続ける、ということだ。

248
00:09:13,660 --> 00:09:19,168
だから、これを実行すると、V は行ベクトルになる。

249
00:09:19,168 --> 00:09:23,022
これは、そう、1 x 11 行列だ。

250
00:09:23,022 --> 00:09:26,921
これが 1、1.1、1.2、1.3 と続き、

251
00:09:26,921 --> 00:09:26,921


252
00:09:27,630 --> 00:09:30,141
最後は2 まで行く。

253
00:09:31,440 --> 00:09:33,269
さらに、

254
00:09:33,269 --> 00:09:35,049
V = 1、コロン、6 と指定すると

255
00:09:35,060 --> 00:09:38,270
V にこれらの数字が代入される。

256
00:09:38,270 --> 00:09:41,291
1 から 6 だ。

257
00:09:41,620 --> 00:09:44,254
さらに、行列を作成する他の方法もある。

258
00:09:44,254 --> 00:09:47,426
ones(2,3) はコマンドで

259
00:09:47,426 --> 00:09:49,134
それは行列を作成し

260
00:09:49,140 --> 00:09:50,790
2 x 3 行列だ。

261
00:09:50,790 --> 00:09:52,712
これは 全て 1 の行列。

262
00:09:52,712 --> 00:09:53,991
だから、もし C = 2

263
00:09:54,000 -  -> 00:09:56,845
掛ける ones(2, 3) とすると、

264
00:09:56,845 --> 00:09:59,798
これは

265
00:09:59,798 --> 00:10:03,061
2 x 3 行列で、全てが 2 となる。

266
00:10:03,080 --> 00:10:04,258
これは、

267
00:10:04,258 --> 00:10:05,513
これをより簡潔に書く方法だ。

268
00:10:05,550 --> 00:10:06,943
C = 2、2、2

269
00:10:06,943 --> 00:10:10,951
セミコロン、 2、2、2、これも同じ結果を戻す。

270
00:10:11,450 --> 00:10:13,910
仮に W = ones(1, 3) ということは、

271
00:10:13,920 --> 00:10:15,485
これは

272
00:10:15,485 --> 00:10:17,937
行ベクトルになる。

273
00:10:17,940 --> 00:10:20,998
三つの要素からなる行で、

274
00:10:20,998 --> 00:10:23,853
全てが 1、そして

275
00:10:23,853 --> 00:10:25,463
同様に 

276
00:10:25,463 --> 00:10:27,469
W = zeros(1, 3) 

277
00:10:27,469 --> 00:10:30,209
そしてこれが作成する行列は

278
00:10:30,220 --> 00:10:34,732
1 x 3 の全てゼロの行列だ。

279
00:10:34,732 --> 00:10:36,910
さらに二つほど、行列の作成方法を紹介する。

280
00:10:36,930 --> 00:10:39,175
もし W = rand(1, 3) 

281
00:10:39,175 --> 00:10:41,512
とすると

282
00:10:41,520 --> 00:10:43,050
これで返されるのは、

283
00:10:43,050 --> 00:10:45,370
1 x 3 の乱数の行列だ。

284
00:10:45,372 --> 00:10:47,118
もし rand (3, 3) 

285
00:10:47,215 --> 00:10:49,008
とすると

286
00:10:49,050 --> 00:10:50,417
これは、

287
00:10:50,417 --> 00:10:51,918
3 x 3 の行列で

288
00:10:51,930 --> 00:10:54,009
すべて 0 から 1 の間の、 

289
00:10:54,009 --> 00:10:55,830
一様分布の 乱数となる。

290
00:10:55,830 --> 00:10:56,937
このため、これを実行するたびに

291
00:10:56,937 --> 00:10:58,608
異なる組み合わせの乱数が、

292
00:10:58,608 --> 00:11:00,510
0 から 1 の間の 一様分布から、

293
00:11:00,540 --> 00:11:02,573
抽出される。

294
00:11:02,573 --> 00:11:03,718
皆さんの中で

295
00:11:03,718 --> 00:11:05,375
ガウス確率変数、あるいは

296
00:11:05,410 --> 00:11:06,275
正規確率変数を

297
00:11:06,275 --> 00:11:07,659
ご存知なら

298
00:11:07,660 --> 00:11:09,112
W を = randn(1, 3) 

299
00:11:09,112 --> 00:11:11,956
と指定することもできる。

300
00:11:11,990 --> 00:11:13,565
すると、これらは、

301
00:11:13,570 --> 00:11:15,435
ガウス分布から抽出された

302
00:11:15,435 --> 00:11:17,798
三つの値で、平均値が0で、

303
00:11:17,798 --> 00:11:19,266
分散あるいは標準偏差が1

304
00:11:19,266 --> 00:11:21,642
となる分布から抽出される。

305
00:11:21,642 --> 00:11:23,148
さらに、もっと複雑なことも可能で、

306
00:11:23,150 --> 00:11:24,698
例えば、 W = マイナス 6

307
00:11:24,698 --> 00:11:26,194
足す 10の平方根

308
00:11:26,210 --> 00:11:28,656
掛ける、例えば、

309
00:11:28,660 --> 00:11:31,978
randn (1, 10000)

310
00:11:31,978 --> 00:11:33,106
一番最後にセミコロンをつける。

311
00:11:33,106 --> 00:11:35,623
結果を出力しないように。

312
00:11:35,623 --> 00:11:37,599
これを出力すると、

313
00:11:37,599 --> 00:11:38,905
出力されるのは

314
00:11:38,910 --> 00:11:40,582
10万、失礼、

315
00:11:40,610 --> 00:11:44,481
1万要素のベクトルだ。

316
00:11:44,490 --> 00:11:47,570
だから、えー、まあいいか、

317
00:11:47,570 --> 00:11:48,570
出力してみよう。

318
00:11:48,570 --> 00:11:51,570
このような行列が作成される。

319
00:11:51,570 --> 00:11:51,570


320
00:11:51,570 --> 00:11:53,978
この通り 1万の要素がある。

321
00:11:53,978 --> 00:11:55,835
これが W の中身だ。

322
00:11:55,835 --> 00:11:57,392
だから、ここで

323
00:11:57,392 --> 00:11:59,442
W のヒストグラムをプロットすると

324
00:11:59,442 --> 00:12:01,818
hist コマンドを使う。

325
00:12:01,820 --> 00:12:04,752
Octave の hist コマンドは、

326
00:12:04,752 --> 00:12:06,130
数秒かかるが、

327
00:12:06,130 --> 00:12:07,297
これが出力される。

328
00:12:07,297 --> 00:12:08,965
これは、W に含まれる

329
00:12:08,970 --> 00:12:10,646
確率変数の、ヒストグラムだ。

330
00:12:10,650 --> 00:12:12,732
これはマイナス 6 足す 10の平方根

331
00:12:12,732 --> 00:12:15,537
掛ける このガウス確率変数だ。

332
00:12:15,537 --> 00:12:17,537
そして、ヒストグラムをプロットするのに

333
00:12:17,560 --> 00:12:21,032
もっと棒の数を増やして、例えば 50 本としてみる。

334
00:12:21,032 --> 00:12:22,578
するとこれが

335
00:12:22,578 --> 00:12:25,735
平均が -6 のガウス分布のヒストグラムだ。

336
00:12:25,735 --> 00:12:27,285
なぜなら、ここに -6があって、

337
00:12:27,285 --> 00:12:29,208
それ足す 10 の平方根掛けるこれだからだ。

338
00:12:29,230 --> 00:12:32,952
だから、この

339
00:12:32,952 --> 00:12:34,961
ガウス確率変数の分散は 10で、

340
00:12:34,961 --> 00:12:36,696
その標準偏差は、

341
00:12:36,700 --> 00:12:38,935
10 の平方根、それは、

342
00:12:38,950 --> 00:12:41,063
3.1 だ。

343
00:12:41,780 --> 00:12:43,857
最後に、行列を作成する特別なコマンドがある。

344
00:12:43,857 --> 00:12:46,208
これは、eye コマンドだ。

345
00:12:46,208 --> 00:12:48,394
eye は、おそらくダジャレだろうが、

346
00:12:48,394 --> 00:12:51,028
identity matrix (単位行列) という言葉の略で

347
00:12:51,050 --> 00:12:52,650
例えば、 eye(4) とすると、

348
00:12:52,720 --> 00:12:56,004
これは 4 x 4 の単位行列だ。

349
00:12:56,004 --> 00:12:57,681
ということで、 I = eye(4)

350
00:12:57,681 --> 00:13:00,458
とすると、 4 x 4 の単位行列が得られる。

351
00:13:00,458 --> 00:13:04,475
さらに、 I = eye(5)、ではなくて eye(6) は

352
00:13:04,475 --> 00:13:05,611
6 x 6 の単位行列、

353
00:13:05,611 --> 00:13:08,089
eye(3)は

354
00:13:08,120 --> 00:13:09,134
3 x 3 の単位行列だ。

355
00:13:09,134 --> 00:13:12,064
最後に、

356
00:13:12,064 --> 00:13:14,263
このビデオのまとめとして、もう一つ便利なコマンドがある。

357
00:13:14,280 --> 00:13:15,479
これば help コマンドだ。

358
00:13:15,479 --> 00:13:17,454
help eye と入力すると、

359
00:13:17,454 --> 00:13:21,181
単位行列のヘルプが表示される。

360
00:13:21,190 --> 00:13:22,803
Q を押すと終了する。

361
00:13:22,803 --> 00:13:25,375
また、help rand と入力すると

362
00:13:25,380 --> 00:13:27,793
rand 、つまり乱数作成関数についての

363
00:13:27,793 --> 00:13:29,734
ドキュメントが表示される。

364
00:13:29,734 --> 00:13:31,898
また、 help help とすると、

365
00:13:31,900 --> 00:13:35,615
help についてのヘルプが表示される。

366
00:13:36,455 --> 00:13:39,022
ということで、これらが

367
00:13:39,022 --> 00:13:41,612
Octave の基本操作だ。

368
00:13:41,612 --> 00:13:42,699
これを使えば、

369
00:13:42,699 --> 00:13:47,131
行列を作成し、掛け算や足し算をしたり、

370
00:13:47,131 --> 00:13:50,553
Octave の基本基本操作ができる。

371
00:13:50,560 --> 00:13:51,893
次のビデオでは

372
00:13:51,920 --> 00:13:53,818
より高度なコマンドと、

373
00:13:53,818 --> 00:13:55,700
Octave での

374
00:13:55,750 --> 00:13:59,180
データの取り扱いや処理について話す。
