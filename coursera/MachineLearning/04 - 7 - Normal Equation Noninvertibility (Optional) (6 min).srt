1
00:00:00,000 --> 00:00:03,162
このビデオでは、正規方程式と非可逆性について

2
00:00:03,162 --> 00:00:05,212
お話しする。

3
00:00:05,212 --> 00:00:07,877
これは、いくらか高度な概念だが、

4
00:00:07,877 --> 00:00:10,289
よく質問される。

5
00:00:10,289 --> 00:00:12,711
だからここで話しておこうと思う。

6
00:00:12,711 --> 00:00:14,752
だがこれは、いくらか高度な概念なので、

7
00:00:14,752 --> 00:00:17,982
おまけの題材と思ってもらって良い。

8
00:00:17,982 --> 00:00:22,413
あなたがたの内の何人かは、理解しておいたら便利、と思うような

9
00:00:22,413 --> 00:00:24,416
現象が存在し、遭遇することもある。

10
00:00:24,416 --> 00:00:26,619
だが、それを理解していなくても、

11
00:00:26,619 --> 00:00:28,450
正規方程式も、線形回帰も

12
00:00:28,450 --> 00:00:30,539
現実に実行できるし、正しく機能させられる。

13
00:00:30,539 --> 00:00:33,195
問題はこんなだ：

14
00:00:33,195 --> 00:00:35,691
あなたがたの内の何人かは

15
00:00:35,691 --> 00:00:37,876
線形代数に詳しいだろう、そのような人達が

16
00:00:37,876 --> 00:00:39,884
私に尋ねてくることは、

17
00:00:39,884 --> 00:00:42,542
この シータ = (X転置 X)^-1 X転置 Y という式で、

18
00:00:42,542 --> 00:00:45,130
これを計算する時に、

19
00:00:45,130 --> 00:00:49,476
(X転置 X)が非可逆ならどうしたらいいか？ということだ。

20
00:00:49,476 --> 00:00:52,336
つまり、線形代数に詳しい人達は、

21
00:00:52,336 --> 00:00:55,171
逆行列が求められる行列は、限られていて、

22
00:00:55,171 --> 00:00:58,598
それ以外の行列は逆行列を持たず、

23
00:00:58,598 --> 00:01:00,540
非正則行列とか非可逆行列とか、特異行列とか

24
00:01:00,540 --> 00:01:04,737
縮退した行列（注：日本語ではあまり言われない）などと呼ばれることがあるのを知っているだろう。

25
00:01:04,737 --> 00:01:08,893
(X転置 X)が非正則行列となる問題は

26
00:01:08,893 --> 00:01:11,287
本当に稀にしか起こらないはずだ。

27
00:01:11,287 --> 00:01:16,749
そしてOctaveでは、シータを求めるために、こう実装すれば、

28
00:01:16,749 --> 00:01:20,636
これは実は、正しく振舞ってくれる。

29
00:01:20,636 --> 00:01:24,629
少し技術的過ぎるので、これ以上詳細には踏みこまない。

30
00:01:24,629 --> 00:01:28,207
しかし、Octaveには行列の逆行列を計算する二つの関数がある。

31
00:01:28,207 --> 00:01:32,146
一つはpinv()と呼ばれ、もう一つはinv()と呼ばれる。

32
00:01:32,146 --> 00:01:36,089
これら二つの違いは、少し技術的だ。

33
00:01:36,089 --> 00:01:38,107
一方は擬似逆行列 (pseudo inverse)、一方は逆行列(inverse)と呼ばれている。

34
00:01:38,107 --> 00:01:42,658
数学的には以下のことが示せる：pinv()関数を使っている限りは

35
00:01:42,658 --> 00:01:47,145
(X転置 X)が非正則行列でも

36
00:01:47,145 --> 00:01:51,227
望んでいるシータの値を実際に計算してくれる。

37
00:01:51,227 --> 00:01:54,095
pinv()とinv()の

38
00:01:54,095 --> 00:01:55,959
詳細な違いについては

39
00:01:55,959 --> 00:01:58,562
いくらか高度な数値計算の概念なので、

40
00:01:58,562 --> 00:02:00,907
ここでは踏み込まない。

41
00:02:00,907 --> 00:02:02,993
だが、このおまけのビデオでは、

42
00:02:02,993 --> 00:02:04,672
X転置 Xが非可逆とはどういう意味かの

43
00:02:04,672 --> 00:02:08,823
ちょっとした感覚的な話をする、

44
00:02:08,823 --> 00:02:12,108
線形代数が得意で、こんな話題を面白い、

45
00:02:12,108 --> 00:02:13,556
と思う人達のために。

46
00:02:13,556 --> 00:02:15,948
数学的に証明はしないが、

47
00:02:15,948 --> 00:02:18,684
X転置 Xが非可逆なのは、

48
00:02:18,684 --> 00:02:22,596
だいたい原因は二つに分けられる：

49
00:02:22,596 --> 00:02:26,238
最初の原因は、学習の問題に関して、

50
00:02:26,238 --> 00:02:28,461
なんらかの冗長な特徴量がある場合。

51
00:02:28,461 --> 00:02:30,844
具体的には、住居の価格を予測したいとすると、

52
00:02:30,844 --> 00:02:34,877
x1が家の面積を平方フィートで表し、

53
00:02:34,877 --> 00:02:37,792
x2を家の広さを平方メートルで表しているとする。

54
00:02:37,792 --> 00:02:46,071
こういう場合は、１メートルは少数第2位までで丸めると、3.28フィートだから、

55
00:02:46,071 --> 00:02:48,947
この二つの特徴量は、いつも以下の制約を満たす：

56
00:02:48,947 --> 00:02:55,378
x1 = (3.28)^2 * x2 。

57
00:02:55,378 --> 00:02:59,107
そして、これは少し高度な線形代数の話だが、

58
00:02:59,107 --> 00:03:01,169
もしあなたが線形代数の専門家なら、

59
00:03:01,169 --> 00:03:05,275
二つの特徴量がこのような線形の式の関係を持っていたら、行列 X転置 Xが非可逆となることが

60
00:03:05,275 --> 00:03:09,095
証明できるのだ。

61
00:03:09,095 --> 00:03:13,320
二番目に (X転置 X) が非正則行列になる状況は、

62
00:03:13,320 --> 00:03:17,043
大量の特徴量に対して

63
00:03:17,043 --> 00:03:18,850
学習アルゴリズムを走らせようとしている時だ。

64
00:03:18,850 --> 00:03:23,035
具体的には、mがn以下の時。

65
00:03:23,035 --> 00:03:27,723
例えば、m=10個のトレーニング手本があって、

66
00:03:27,723 --> 00:03:31,192
n=100個の特徴量があるとする。

67
00:03:31,192 --> 00:03:36,829
その時はフィッティングしたいパラメーターベクトルシータはn+1次元だから

68
00:03:36,829 --> 00:03:39,308
101次元となる。

69
00:03:39,308 --> 00:03:43,602
だからあなたは101個のパラメータを、たった10個のトレーニング手本で
フィッティングしようとしているわけだ。

70
00:03:43,602 --> 00:03:46,899
これはうまく行く可能性もあるが、

71
00:03:46,899 --> 00:03:49,078
常に良いアイデアとは言えない。

72
00:03:49,078 --> 00:03:52,212
何故なら、後で見るように、データ数が十分でないから。

73
00:03:52,212 --> 00:03:58,432
100とか101個のパラメータにフィッティングしたいという時に、10個の手本しかないならば。

74
00:03:58,432 --> 00:04:01,924
このコースで後ほど、何故これが多くのパラメータをフィッティングする時に

75
00:04:01,924 --> 00:04:04,418
データとして少なすぎるのかを見ていく。

76
00:04:04,418 --> 00:04:07,544
だが一般的には、その場合に私たちがやるのは、もしmがn以下なら、

77
00:04:07,544 --> 00:04:12,513
特徴量をいくつか削除するか、正規化と呼ばれる

78
00:04:12,513 --> 00:04:14,689
技術を使う。

79
00:04:14,689 --> 00:04:17,477
正規化も、このコースで後で少し扱うが、

80
00:04:17,477 --> 00:04:21,905
それも多くの特徴量を使って、多くのパラメータをフィッティングするのを、

81
00:04:21,905 --> 00:04:24,117
相対的に少ないトレーニングセットでも可能にしてくれる手法だ。

82
00:04:24,117 --> 00:04:27,698
だがこの正規化は、このコースの後半の内容だ。

83
00:04:27,698 --> 00:04:32,628
要約すると、X転置 Xが非正則行列だと、

84
00:04:32,628 --> 00:04:35,877
あるいは非可逆だと分かったら、

85
00:04:35,877 --> 00:04:38,380
あたなにオススメする方法は、

86
00:04:38,380 --> 00:04:42,016
はじめに、特徴量を調べて、このx1とx2のように線形に依存しているような

87
00:04:42,016 --> 00:04:45,304
冗長な特徴量がないかを調べる。

88
00:04:45,304 --> 00:04:48,017
線形に依存しているとは、お互いがお互いの線形関数になっている、と言ってもいい。

89
00:04:48,017 --> 00:04:49,841
そして冗長な特徴量があったら、

90
00:04:49,841 --> 00:04:51,493
これらの特徴量のうちの一方を、単純に削除してしまう。

91
00:04:51,493 --> 00:04:53,724
これらの特徴量は、二つは要らない。

92
00:04:53,724 --> 00:04:55,601
だからこの二つの特徴量のうち一つを削除するだけで

93
00:04:55,601 --> 00:04:58,586
非可逆の問題は解決するはずだ。

94
00:04:58,586 --> 00:05:02,655
つまり、まず最初に、各特徴量を見ていき、冗長な特徴量がないか確認して、

95
00:05:02,655 --> 00:05:05,481
もし見つかったら、冗長な特徴量を削除し、

96
00:05:05,481 --> 00:05:07,659
それを冗長な特徴量がなくなるまで続ける。

97
00:05:07,659 --> 00:05:09,799
そして冗長な特徴量がなくなったら、

98
00:05:09,799 --> 00:05:11,939
次に、特徴量の数が多すぎないか、確認する。

99
00:05:11,939 --> 00:05:13,638
そして多すぎたら、

100
00:05:13,638 --> 00:05:16,140
いくつかの特徴量を削除して、あえて使う特徴量の数を減らすか、

101
00:05:16,140 --> 00:05:20,708
または正規化を検討する。

102
00:05:20,708 --> 00:05:22,821
正規化は、後で扱う内容だ。

103
00:05:22,821 --> 00:05:27,877
以上が正規方程式法で、行列(X転置 X)が非正則とは

104
00:05:27,877 --> 00:05:31,885
どういう意味か、という話だった。

105
00:05:31,885 --> 00:05:35,710
だがこの問題は、たぶん滅多に遭遇しないだろう。

106
00:05:35,710 --> 00:05:40,554
しかもOctaveで実装する時に、pinv関数、

107
00:05:40,554 --> 00:05:42,853
これは擬似逆行列(pseudo-inverse)関数と呼ばれるものだが、

108
00:05:42,853 --> 00:05:46,700
だからもし別の線形代数ライブラリを使う時には、
擬似逆行列(pseudo-inverse)と呼ばれるものがそれだが、

109
00:05:46,700 --> 00:05:50,071
それを使いさえすれば、その実装は正しく動く、

110
00:05:50,071 --> 00:05:52,582
たとえ(X転置 X)が非正則行列でも。

111
00:05:52,582 --> 00:05:55,198
それはどちらにせよ、滅多に起こらない。

112
00:05:55,198 --> 00:59:59,000
だからこれは、ほとんどの線形回帰の実装において、問題になることはないだろう。
